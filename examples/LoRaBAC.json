[
    {
        "id": "b69f118eda93bcba",
        "type": "subflow",
        "name": "Rest API Read downlink/ Write uplink",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 300,
                "y": 360,
                "wires": [
                    {
                        "id": "cca29c604ef7a576"
                    },
                    {
                        "id": "5d9f6a60dfbc7e3d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1540,
                "y": 460,
                "wires": [
                    {
                        "id": "5734688567b77f09",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "dataDirection",
                "type": "str",
                "value": "uplink",
                "ui": {
                    "icon": "font-awesome/fa-location-arrow",
                    "label": {
                        "en-US": "Direction"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Uplink"
                                },
                                "v": "uplink"
                            },
                            {
                                "l": {
                                    "en-US": "Downlink"
                                },
                                "v": "downlink"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 660,
            "y": 580,
            "wires": [
                {
                    "id": "1651e3fd88ca6686",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "0cd63614960bddce",
        "type": "function",
        "z": "b69f118eda93bcba",
        "name": "BACnet Object Exist ?",
        "func": "let device = msg.device;\nconst debug = flow.get(\"$parent.g_debug\");\n\nswitch (msg.statusCode) {\n    //////////////////////////////////////////////////    \n    // Case 200 : \"Success\" > Stops here OR continue to read Downlink Objects. \n    // Case 200 : \"Object does not exist\" > Create Objects\n    //////////////////////////////////////////////////\n    case 200:\n        if (msg.payload.includes(\"Unknown Object\")) {\n            debug(device, \"creation\", `${device.identity.deviceName} : Some BACnet objects don't exist`);\n            return [{ device: device }, null];       // Create Downlink Objects\n        }\n        else {\n            switch (env.get(\"dataDirection\")) {\n                case \"uplink\":\n                    debug(device, \"up\", `${device.identity.deviceName} (RestAPI) : Write Uplink Objects`);\n\n                    const dataDirection = Object.values(device.bacnet.objects).map(obj => obj.dataDirection);\n\n                    if (dataDirection.some(direction => { return direction === \"downlink\" })) {\n                        return [null, { device: device }];    // Continue to read downlink Objects\n                    }\n                    else {\n                        debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n                        return [null, null];                 // Stops here\n                    }\n                    break;\n                case \"downlink\":\n                    debug(device, \"down\", `${device.identity.deviceName} (RestAPI) : Read Downlink Objects`);\n                    return [null, { device: device, payload: JSON.parse(msg.payload) }];\n                    break;\n                default:\n                    \n            }\n            \n        }\n\n    case 400:\n        node.error(\"Error : Bad HTTP Request\");\n        if (msg.payload.includes(\"write-access-denied\")) {\n            node.error(\"Error : Trying to write a Read Only object (analogInput)\");\n        }\n        return [null, null];\n\n    case 401:\n        node.error(\"Error : Can't connect to controller : Authorization error\");\n        return [null, null];\n\n    case 500:\n        node.error(\"Error : Server Error 500\");\n        return [null, null];\n\n    case 404:\n        node.error(\"Error : 404\");\n        return [null, null];\n\n    case \"ETIMEDOUT\":\n        node.error(\"Error : Can't connect to controller : TimeOut\");\n        return [null, null];\n\n    case \"UNABLE_TO_VERIFY_LEAF_SIGNATURE\":\n        node.error(\"Error : You forgot to enable the TLS config in your HTTP node\");\n        return [null, null];\n\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 360,
        "wires": [
            [
                "217eb0a5e068836a",
                "b21807476d504e46"
            ],
            [
                "ff8e17b694804f0d"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "97c7dfa2a3ada2e9",
        "type": "http request",
        "z": "b69f118eda93bcba",
        "g": "400cb4f106598ac4",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 360,
        "wires": [
            [
                "0cd63614960bddce"
            ]
        ]
    },
    {
        "id": "cca29c604ef7a576",
        "type": "function",
        "z": "b69f118eda93bcba",
        "g": "400cb4f106598ac4",
        "name": "READ/WRITE Objects",
        "func": "\nlet device = msg.device;\nlet dataDirection = env.get('dataDirection')\nlet bacnetObjects = device?.bacnet?.objects;\n\nif(device?.controller?.protocol != \"restAPIBacnet\") return null;\n\nswitch (device?.controller?.model) {\n\n  ///////////////////////////////////////////////////////////\n  ////// Distech Controls Eclypse APEX\n  ////// https://www.postman.com/distech/distech-ecy-v2-public/request/3qk28wy/write-property-multiple\n  ///////////////////////////////////////////////////////////\n  case \"distechControlsV2\":\n    /********* HTTP Request Write Properties\n    {\n        \"method\": \"POST\",\n        \"url\": \"https://@IP/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n        \"headers\": {Authorization: httpAuthentication,\n                  ContentType: \"application/json\"},\n        \n        \"payload\": {\n            \"encode\": \"text\",\n            \"property-references\": [\n                {\n                  \"type\": \"analogValue\",\n                  \"instance\": y,\n                  \"property\": \"presentValue\",\n                  \"value\" : \"xx\"\n                },\n                {\n                  \"type\": \"analogValue\",\n                  \"instance\": y,\n                  \"property\": \"presentValue\",\n                  \"value\" : \"xx\"\n                },\n                ...\n            ]\n        },\n        \"requestTimeout\" : xxx (ms)\n    }\n    */\n\n    let property_references = [];\n    for (let object in bacnetObjects) {\n      if (bacnetObjects[object].dataDirection == dataDirection) {\n        let temp = {}\n        switch (dataDirection) {\n          case \"uplink\":\n            temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\", \"value\": ' + bacnetObjects[object].value + ' }';\n            property_references.push(JSON.parse(temp));\n            break;\n          case \"downlink\":\n            temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\"}';\n            property_references.push(JSON.parse(temp));\n            break;\n          default:\n            \n        }\n      }\n    }\n\n    // Return HTTP Request\n    switch (dataDirection) {\n      case \"uplink\":\n        return {\n          \"method\": \"POST\",\n          \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n          \"headers\": {\n            Authorization: device.controller.httpAuthentication,\n            ContentType: \"application/json\"\n          },\n          \"payload\": {\n            \"encode\": \"text\",\n            \"property-references\": property_references\n          },\n          \"requestTimeout\": flow.get('$parent.g_httpRequestTimeOut'),\n          \"device\": device\n        }\n        break;\n      case \"downlink\":\n        return {\n          \"method\": \"POST\",\n          \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/services/bacnet/local/objects/read-property-multiple\",\n          \"headers\": {\n            Authorization: device.controller.httpAuthentication,\n            ContentType: \"application/json\"\n          },\n          \"payload\": {\n            \"encode\": \"text\",\n            \"property-references\": property_references\n          },\n          \"requestTimeout\": flow.get('$parent.g_httpRequestTimeOut'),\n          \"device\": device\n        }\n        break;\n      default:\n      return\n        break;\n    }\n    \n\n\n  ///////////////////////////////////////////////////////////\n  ////// XXXXX Controller\n  ////// URL to the API documentation\n  ///////////////////////////////////////////////////////////\n  case \"anotherController\":\n\n    break;\n  default:\n  \n    return null;\n    break;\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 360,
        "wires": [
            [
                "97c7dfa2a3ada2e9"
            ]
        ]
    },
    {
        "id": "217eb0a5e068836a",
        "type": "function",
        "z": "b69f118eda93bcba",
        "g": "61aa296a893778f7",
        "name": "CREATE Objects",
        "func": "\nlet device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\n\nswitch (device.controller.model) {\n\n  ///////////////////////////////////////////////////////////\n  ////// Distech Controls Eclypse APEX\n  ////// https://www.postman.com/distech/distech-ecy-v2-public/request/57jbx8w/create-objects-multiple\n  ///////////////////////////////////////////////////////////\n  case \"distechControlsV2\":\n\n    /**********  Objects creation on the controller\n    {\n        \"method\": \"POST\",\n        \"url\": \"https://\" + flow.get('$parent.g_controllerIP') +\"/api/rest/v2/batch\",\n        \"headers\": {Authorization: flow.get('$parent.g_httpAuthentication'),\n                  ContentType: \"application/json\"}\n        \"payload\":{\n            \"requests\": [\n                {\n                  \"id\": \"1\",\n                  \"method\": \"POST\",\n                  \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\",\n                  \"body\": {\n                    \"object-type\": \"AnalogValue\",\n                    \"instance-number\": 10010,\n                    \"name\": \"apiAVTest10\"\n                  }\n                },\n                {\n                  \"id\": \"2\",\n                  \"method\": \"POST\",\n                  \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\",\n                  \"body\": {\n                    \"object-type\": \"BinaryValue\",\n                    \"instance-number\": 10010,\n                    \"name\": \"apiBVTest10\"\n                  }\n                },\n                ...\n            ]\n        },\n        \"requestTimeout\" : xxx (ms)\n    }\n    */\n\n\n    let requests = [], i = 1;\n\n    for (let object in bacnetObjects) {\n      let temp = '{ \"id\": \"' + (i++) + '\", \"method\": \"POST\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\", \"body\": { \"object-type\": \"' + bacnetObjects[object].objectType + '\", \"instance-number\": ' + bacnetObjects[object].instanceNum + ', \"name\": \"' + bacnetObjects[object].objectName + '\" } }';\n      requests.push(JSON.parse(temp));\n    }\n\n    // Return HTTP Request\n    return {\n      \"method\": \"POST\",\n      \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/batch\",\n      \"headers\": {\n        Authorization: device.controller.httpAuthentication,\n        ContentType: \"application/json\"\n      },\n      \"payload\": { \"requests\": requests },\n      \"requestTimeout\": flow.get('$parent.g_httpRequestTimeOut'),\n      \"device\": device\n    }\n\n  ///////////////////////////////////////////////////////////\n  ////// XXXXX Controller\n  ////// URL to the API documentation\n  ///////////////////////////////////////////////////////////\n  case \"anotherController\":\n\n  \n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 260,
        "wires": [
            [
                "07372933f25ecd95"
            ]
        ]
    },
    {
        "id": "07372933f25ecd95",
        "type": "http request",
        "z": "b69f118eda93bcba",
        "g": "61aa296a893778f7",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1550,
        "y": 260,
        "wires": [
            [
                "916506ef31409b56",
                "1e8e1765d6e45e43"
            ]
        ]
    },
    {
        "id": "916506ef31409b56",
        "type": "function",
        "z": "b69f118eda93bcba",
        "g": "61aa296a893778f7",
        "name": "READ/WRITE Objects",
        "func": "\nlet device = msg.device;\nlet previousValues = flow.get(\"$parent.g_previousValues\");\nlet dataDirection = env.get('dataDirection')\nlet bacnetObjects = device.bacnet.objects;\n\nswitch (device.controller.model) {\n\n    ///////////////////////////////////////////////////////////\n    ////// Distech Controls Eclypse APEX\n    ////// https://www.postman.com/distech/distech-ecy-v2-public/request/3qk28wy/write-property-multiple\n    ///////////////////////////////////////////////////////////\n    case \"distechControlsV2\":\n        /********* HTTP Request Write Properties\n        {\n            \"method\": \"POST\",\n            \"url\": \"https://@IP/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n            \"headers\": {Authorization: httpAuthentication,\n                      ContentType: \"application/json\"},\n            \n            \"payload\": {\n                \"encode\": \"text\",\n                \"property-references\": [\n                    {\n                      \"type\": \"analogValue\",\n                      \"instance\": y,\n                      \"property\": \"presentValue\",\n                      \"value\" : \"xx\"\n                    },\n                    {\n                      \"type\": \"analogValue\",\n                      \"instance\": y,\n                      \"property\": \"presentValue\",\n                      \"value\" : \"xx\"\n                    },\n                    ...\n                ]\n            },\n            \"requestTimeout\" : xxx (ms)\n        }\n        */\n\n        let property_references = [];\n        for (let object in bacnetObjects) {\n            let temp = {}\n            switch (bacnetObjects[object].dataDirection) {\n                case \"uplink\":\n                    temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\", \"value\": ' + bacnetObjects[object].value + ' }';\n                    property_references.push(JSON.parse(temp));\n                    break;\n                case \"downlink\":\n                //  if it exist take the previous value of the downlink BACnet object\n                    if (previousValues.hasOwnProperty(device.identity.deviceName)){\n                        temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\", \"value\": ' + previousValues[device.identity.deviceName].bacnet.objects[object].value + ' }';\n                    property_references.push(JSON.parse(temp));\n                    }else{\n                    temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\", \"value\": ' + bacnetObjects[object].value + ' }';\n                    property_references.push(JSON.parse(temp));\n                    }\n\n                    break;\n                default:\n            }\n        \n        }\n\n    // Return HTTP Request\n    return {\n        \"method\": \"POST\",\n        \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n        \"headers\": {\n            Authorization: device.controller.httpAuthentication,\n            ContentType: \"application/json\"\n        },\n        \"payload\": {\n            \"encode\": \"text\",\n            \"property-references\": property_references\n        },\n        \"requestTimeout\": global.get('g_httpRequestTimeOut'),\n        \"device\": device\n    }\n\n    ///////////////////////////////////////////////////////////\n    ////// XXXXX Controller\n    ////// URL to the API documentation\n    ///////////////////////////////////////////////////////////\n    case \"anotherController\":\n\n\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 320,
        "wires": [
            [
                "0f83ea6f5bea04d6"
            ]
        ]
    },
    {
        "id": "0f83ea6f5bea04d6",
        "type": "http request",
        "z": "b69f118eda93bcba",
        "g": "61aa296a893778f7",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1550,
        "y": 320,
        "wires": [
            [
                "2d47d874e869914c"
            ]
        ]
    },
    {
        "id": "1e8e1765d6e45e43",
        "type": "function",
        "z": "b69f118eda93bcba",
        "g": "61aa296a893778f7",
        "name": "Creation results",
        "func": "let device = msg.device;\nconst debug = flow.get('$parent.g_debug');\n\nswitch (msg.statusCode) {\n    //////////////////////////////////////////////////    \n    // Case 200 : \"Success\" > Objects have been created\n    //////////////////////////////////////////////////\n    case 200:\n        if (msg.payload.includes(\"\\\"status\\\":200\")) {\n            debug(device, \"creation\", `${device.identity.deviceName} (RestAPI) : Some BACnet objects have been created`);\n        }\n        if (msg.payload.includes(\"Instance already exists\") || msg.payload.includes(\"Object with same name already exists\")) {\n            flow.set('g_errorObjectCreation', flow.get('g_errorObjectCreation') + 1);\n            node.error(`${device.identity.deviceName} : Some BACnet objects already existed`);\n        }\n        break;\n\n    case 400:\n        node.error(\"Error : Bad HTTP Request\");\n        break;\n\n    case 401:\n        node.error(\"Error : Can't connect to controller : Authorization error\");\n        break;\n\n    case 500:\n        node.error(\"Error : Server Error 500\");\n        break;\n\n    case 404:\n        node.error(\"Error : 404\");\n        break;\n\n\n    case \"ETIMEDOUT\":\n        node.error(\"Error : Can't connect to controller : TimeOut\");\n        break;\n\n    case \"UNABLE_TO_VERIFY_LEAF_SIGNATURE\":\n        node.error(\"Error : You forgot to enable the TLS config in your HTTP node\");\n        break;\n\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Le code ajouté ici sera exécuté une fois\n// à chaque démarrage du noeud.\nglobal.set('g_errorObjectCreation', 0);",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 260,
        "wires": [
            []
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "2d47d874e869914c",
        "type": "function",
        "z": "b69f118eda93bcba",
        "g": "61aa296a893778f7",
        "name": "Debug Write",
        "func": "let device = msg.device;\nconst debug = flow.get('$parent.g_debug');\n\ndebug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`); \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 320,
        "wires": [
            [
                "113dbc2264bad3d4"
            ]
        ]
    },
    {
        "id": "aab29c70a403058f",
        "type": "change",
        "z": "b69f118eda93bcba",
        "name": "Read/Write in process",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "$env('dataDirection') & \" Read/Write in process...\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "yellow",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.shape",
                "pt": "msg",
                "to": "ring",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 600,
        "wires": [
            [
                "1651e3fd88ca6686"
            ]
        ]
    },
    {
        "id": "f583d2c2ef9a43c8",
        "type": "change",
        "z": "b69f118eda93bcba",
        "name": "Read/Write complete",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "$env('dataDirection') & \" Read/Write complete\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.shape",
                "pt": "msg",
                "to": "dot",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 560,
        "wires": [
            [
                "1651e3fd88ca6686"
            ]
        ]
    },
    {
        "id": "bf0580fe3d3d6cbd",
        "type": "change",
        "z": "b69f118eda93bcba",
        "name": "Object creation complete",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "$env('dataDirection') & \" Object creation complete\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.shape",
                "pt": "msg",
                "to": "dot",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 640,
        "wires": [
            [
                "1651e3fd88ca6686"
            ]
        ]
    },
    {
        "id": "0ecd15f3e54d8325",
        "type": "change",
        "z": "b69f118eda93bcba",
        "name": "Object creation in process",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "$env('dataDirection') & \" Object creation in process...\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "yellow",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.shape",
                "pt": "msg",
                "to": "ring",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 520,
        "wires": [
            [
                "1651e3fd88ca6686"
            ]
        ]
    },
    {
        "id": "113dbc2264bad3d4",
        "type": "link out",
        "z": "b69f118eda93bcba",
        "g": "61aa296a893778f7",
        "name": "link out Object creation complete",
        "mode": "link",
        "links": [
            "f935f96e150d5d16"
        ],
        "x": 1875,
        "y": 320,
        "wires": []
    },
    {
        "id": "f935f96e150d5d16",
        "type": "link in",
        "z": "b69f118eda93bcba",
        "name": "link in Object creation complete",
        "links": [
            "113dbc2264bad3d4"
        ],
        "x": 295,
        "y": 640,
        "wires": [
            [
                "bf0580fe3d3d6cbd"
            ]
        ]
    },
    {
        "id": "3ed565d1dca232b9",
        "type": "link in",
        "z": "b69f118eda93bcba",
        "name": "link in Read/Write in progress",
        "links": [
            "4e2211c113b8f904"
        ],
        "x": 295,
        "y": 600,
        "wires": [
            [
                "aab29c70a403058f"
            ]
        ]
    },
    {
        "id": "eb2dc95f046e8e3b",
        "type": "link in",
        "z": "b69f118eda93bcba",
        "name": "link in Read/Write complete",
        "links": [
            "cccac868a01d5465"
        ],
        "x": 295,
        "y": 560,
        "wires": [
            [
                "f583d2c2ef9a43c8"
            ]
        ]
    },
    {
        "id": "c0fa91189059841e",
        "type": "link in",
        "z": "b69f118eda93bcba",
        "name": "link in object creation in process",
        "links": [
            "b21807476d504e46"
        ],
        "x": 295,
        "y": 520,
        "wires": [
            [
                "0ecd15f3e54d8325"
            ]
        ]
    },
    {
        "id": "b21807476d504e46",
        "type": "link out",
        "z": "b69f118eda93bcba",
        "name": "link out object creation",
        "mode": "link",
        "links": [
            "c0fa91189059841e"
        ],
        "x": 1015,
        "y": 260,
        "wires": []
    },
    {
        "id": "4e2211c113b8f904",
        "type": "link out",
        "z": "b69f118eda93bcba",
        "name": "link out Read/Write in progress",
        "mode": "link",
        "links": [
            "3ed565d1dca232b9"
        ],
        "x": 535,
        "y": 420,
        "wires": []
    },
    {
        "id": "47d7c9078ed994bb",
        "type": "function",
        "z": "b69f118eda93bcba",
        "name": "Store Downlink object",
        "func": "/////////////////////////////////////////////////////////////////////\n/////////////////  Store Downlink Objects              //////////////\n/////////////////////////////////////////////////////////////////////\n/* This function stores the downlink data from the controller */\n\nlet device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\n\n// For InfluxDB support\ndevice.influxdb.source = \"downlink\";\n\nswitch (device.controller.model) {\n    case \"distechControlsV2\":\n        let donwlinkObjects = msg.payload;\n\n        for (let i = 0; i < donwlinkObjects.results.length; i++) {\n            Object.values(bacnetObjects).forEach(obj => {\n                if (donwlinkObjects.results[i].type == obj.objectType && donwlinkObjects.results[i].instance == obj.instanceNum) {\n                    if (obj.objectType == \"analogValue\") obj.value = Number(donwlinkObjects.results[i].value);\n                    if (obj.objectType == \"binaryValue\") obj.value = donwlinkObjects.results[i].value;\n                }\n            });\n        }\n\n        return {\n            device: device\n        };\n\n\n\n    ///////////////////////////////////////////////////////////\n    ////// XXXXX Controller\n    ////// URL to the API documentation\n    ///////////////////////////////////////////////////////////\n    case \"anotherController\":\n\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 420,
        "wires": [
            [
                "5734688567b77f09"
            ]
        ]
    },
    {
        "id": "cccac868a01d5465",
        "type": "link out",
        "z": "b69f118eda93bcba",
        "name": "link out Read/Write complete",
        "mode": "link",
        "links": [
            "eb2dc95f046e8e3b"
        ],
        "x": 1535,
        "y": 500,
        "wires": []
    },
    {
        "id": "ff8e17b694804f0d",
        "type": "switch",
        "z": "b69f118eda93bcba",
        "name": "",
        "property": "dataDirection",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "downlink",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "uplink",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1175,
        "y": 460,
        "wires": [
            [
                "47d7c9078ed994bb"
            ],
            [
                "5734688567b77f09"
            ]
        ],
        "outputLabels": [
            "downlink",
            "uplink"
        ],
        "l": false
    },
    {
        "id": "5d9f6a60dfbc7e3d",
        "type": "switch",
        "z": "b69f118eda93bcba",
        "name": "",
        "property": "device.controller.protocol",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "RestAPIBacnet",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 420,
        "wires": [
            [
                "4e2211c113b8f904"
            ]
        ]
    },
    {
        "id": "1651e3fd88ca6686",
        "type": "junction",
        "z": "b69f118eda93bcba",
        "x": 600,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "5734688567b77f09",
        "type": "junction",
        "z": "b69f118eda93bcba",
        "x": 1460,
        "y": 460,
        "wires": [
            [
                "cccac868a01d5465"
            ]
        ]
    },
    {
        "id": "400cb4f106598ac4",
        "type": "group",
        "z": "b69f118eda93bcba",
        "name": "Read/Write BACnet Objects",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "97c7dfa2a3ada2e9",
            "cca29c604ef7a576"
        ],
        "x": 394,
        "y": 319,
        "w": 492,
        "h": 82
    },
    {
        "id": "61aa296a893778f7",
        "type": "group",
        "z": "b69f118eda93bcba",
        "name": "Create missing BACnet Objects",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "217eb0a5e068836a",
            "07372933f25ecd95",
            "916506ef31409b56",
            "0f83ea6f5bea04d6",
            "1e8e1765d6e45e43",
            "2d47d874e869914c",
            "113dbc2264bad3d4"
        ],
        "x": 1154,
        "y": 219,
        "w": 762,
        "h": 142
    },
    {
        "id": "38c4db63982e52db",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "817e4dabf2b43baa",
        "type": "tab",
        "label": "LoRaBAC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "675d2785724bfb32",
        "type": "group",
        "z": "817e4dabf2b43baa",
        "name": "MQTT (to Configure)",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "8f63125f79c7fbe1",
            "8fbaa8668d2d8a58",
            "9998d341375b9595"
        ],
        "x": 4,
        "y": 236,
        "w": 382,
        "h": 142
    },
    {
        "id": "a990745e23c4a9cb",
        "type": "group",
        "z": "817e4dabf2b43baa",
        "name": "Uplink",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#e3f3d3"
        },
        "nodes": [
            "79f09a446f9ed014",
            "a0980c385c432953",
            "1183a019f6586c9a"
        ],
        "x": 395,
        "y": 198,
        "w": 312,
        "h": 159
    },
    {
        "id": "d9d43cf968f2ab66",
        "type": "group",
        "z": "817e4dabf2b43baa",
        "name": "Downlink",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "bd79217da71323f2",
            "9057780c3043f613",
            "7d18c7d59c3ba293"
        ],
        "x": 715,
        "y": 198,
        "w": 512,
        "h": 159
    },
    {
        "id": "9d842abe6fa6f223",
        "type": "group",
        "z": "817e4dabf2b43baa",
        "name": "MQTT send downlink",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "c6242cf0d850ad6a",
            "bcaa62e3099d62c4",
            "a5f874ca0bf82682"
        ],
        "x": 1254,
        "y": 199,
        "w": 352,
        "h": 122
    },
    {
        "id": "a0980c385c432953",
        "type": "junction",
        "z": "817e4dabf2b43baa",
        "g": "a990745e23c4a9cb",
        "x": 421,
        "y": 276,
        "wires": [
            [
                "79f09a446f9ed014",
                "1183a019f6586c9a"
            ]
        ]
    },
    {
        "id": "a5f874ca0bf82682",
        "type": "junction",
        "z": "817e4dabf2b43baa",
        "g": "9d842abe6fa6f223",
        "x": 1280,
        "y": 280,
        "wires": [
            [
                "c6242cf0d850ad6a",
                "bcaa62e3099d62c4"
            ]
        ]
    },
    {
        "id": "bcaa62e3099d62c4",
        "type": "mqtt out",
        "z": "817e4dabf2b43baa",
        "g": "9d842abe6fa6f223",
        "name": "MQTT Publisher",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "",
        "x": 1420,
        "y": 280,
        "wires": []
    },
    {
        "id": "bd79217da71323f2",
        "type": "function",
        "z": "817e4dabf2b43baa",
        "g": "d9d43cf968f2ab66",
        "name": "prepare downlink",
        "func": "///////////////////////////////////////////////////////////\n////// This part is device dependant\n////// The configuration depends on the downlink strategy\n///////////////////////////////////////////////////////////\n\nlet device = msg.device;\n\nvar staticDownlinkObjects = device.lorawan.defaultValuesForDownlink ?? null ;\n\nlet bacnetObjects = device.bacnet.objects;\nconst debug = flow.get(\"g_debug\");\nlet downlinkLowPriorityObject = 0;\nlet previousValues = flow.get(\"g_previousValues\");\nlet previousBacnetObject = previousValues[device.identity.deviceName].bacnet.objects;\nlet payload={};\n\nfunction downlinkPayloadCreation(downlinkObjectToSend) {\n    //Creation of the downlink payload\n    for (let obj in bacnetObjects){\n        if (bacnetObjects[obj].dataDirection === \"downlink\" && bacnetObjects[obj].downlinkPort == bacnetObjects[downlinkObjectToSend].downlinkPort){\n            let temp = \"{ \\\"\" + obj + \"\\\" : \" + JSON.stringify(bacnetObjects[obj].value) + \" }\";                        \n            payload = { ...payload, ...JSON.parse(temp) }\n        }\n    }\n    // Chek if there are other values to add to the payload\n    if (device.lorawan.hasOwnProperty(\"defaultValuesForDownlink\") ){\n        if (device.lorawan.defaultValuesForDownlink.hasOwnProperty(\"fPort_\" + bacnetObjects[downlinkObjectToSend].downlinkPort)){\n            for (let obj in staticDownlinkObjects[\"fPort_\"+ bacnetObjects[downlinkObjectToSend].downlinkPort]){\n                    let temp = \"{ \\\"\" + obj + \"\\\" : \" + JSON.stringify(staticDownlinkObjects[\"fPort_\"+ bacnetObjects[downlinkObjectToSend].downlinkPort][obj]) + \" }\";                        \n                    payload = { ...payload, ...JSON.parse(temp) }\n    \n            }\n        }\n    }\n    msg.device.lorawan.downlinkPort = bacnetObjects[downlinkObjectToSend].downlinkPort\n                        \n}\n\nfor (let object in bacnetObjects) {\n\n    if (bacnetObjects[object].dataDirection === \"downlink\") {\n        \n        switch (bacnetObjects[object].downlinkPortPriority) {\n            case \"high\":\n                switch (bacnetObjects[object].downlinkStrategy) {\n                    case \"onChangeOfThisValue\":\n                        if (bacnetObjects[object].value != previousBacnetObject[object].value) {\n                            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink high priority COV\" });\n                            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : Previous value ${previousBacnetObject[object].value}  != ${object} ${bacnetObjects[object].value}`);\n                            //Creation of the downlink payload\n                            downlinkPayloadCreation(object)\n                        }\n                        break;\n                    case \"onChangeOfThisValueWithinRange\":\n                        if (bacnetObjects[object].value != previousBacnetObject[object].value && bacnetObjects[object].value <= bacnetObjects[object].range[1] && bacnetObjects[object].value >= bacnetObjects[object].range[0]) {\n                            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink high priority COVWR\" });\n                            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : Previous value ${previousBacnetObject[object].value}  != ${object} ${bacnetObjects[object].value}`);\n                            //Creation of the downlink payload\n                            downlinkPayloadCreation(object)\n                        }\n                        break;\n                    case \"compareToUplinkObjectWithinRange\":\n                        if (bacnetObjects[object].value != bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value && bacnetObjects[object].value <= bacnetObjects[object].range[1] && bacnetObjects[object].value >= bacnetObjects[object].range[0]) {\n                            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink high priority CUVWR\" });\n                            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : ${bacnetObjects[object].uplinkToCompareWith} ${bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value}  != ${object} ${bacnetObjects[object].value}`);\n                            //Creation of the downlink payload\n                            downlinkPayloadCreation(object)\n                        }\n                        break;\n                    case \"compareToUplinkObject\":\n                        if (bacnetObjects[object].value != bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value) {\n                            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink high priority CUV\" });\n                            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : ${bacnetObjects[object].uplinkToCompareWith} ${bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value}  != ${object} ${bacnetObjects[object].value}`);\n                            //Creation of the downlink payload\n                            downlinkPayloadCreation(object)\n                        }\n                        break;\n                    default:\n                        \n                }\n                \n                break;\n            case \"low\":\n                //In case of low priority downlink the object name is kept till the end of the for loop \n                // to be sur that there is not any high priority downlink to send \n                switch (bacnetObjects[object].downlinkStrategy) {\n                    case \"onChangeOfThisValue\":\n                        if (bacnetObjects[object].value != previousBacnetObject[object].value) {\n                            downlinkLowPriorityObject = object;\n                        }\n                        break;\n                    case \"onChangeOfThisValueWithinRange\":\n                        if (bacnetObjects[object].value != previousBacnetObject[object].value && bacnetObjects[object].value <= bacnetObjects[object].range[1] && bacnetObjects[object].value >= bacnetObjects[object].range[0]) {\n                            downlinkLowPriorityObject = object;\n                        }\n                        break;\n                    case \"compareToUplinkObjectWithinRange\":\n                        if (bacnetObjects[object].value != bacnetObjects[bacnetObjects[object].uplinkToCompareWith]?.value  && bacnetObjects[object].value <= bacnetObjects[object].range[1] && bacnetObjects[object].value >= bacnetObjects[object].range[0]) {\n                            downlinkLowPriorityObject = object;\n                        }\n                        break;\n                    case \"compareToUplinkObject\":\n                        if (bacnetObjects[object].value != bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value) {\n                            downlinkLowPriorityObject = object;\n                        }\n                        break;\n                    default:\n                        \n                }\n                break;\n            default:\n\n        }\n    }\n}\nif (downlinkLowPriorityObject != 0) {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink low priority\" });\n    switch (bacnetObjects[downlinkLowPriorityObject].downlinkStrategy) {\n        case \"onChangeOfThisValue\":\n            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : Previous value ${previousBacnetObject[downlinkLowPriorityObject].value}  != ${downlinkLowPriorityObject} ${bacnetObjects[downlinkLowPriorityObject].value}`);\n            break;\n        case \"onChangeOfThisValueWithinRange\":\n            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : Previous value ${previousBacnetObject[downlinkLowPriorityObject].value}  != ${downlinkLowPriorityObject} ${bacnetObjects[downlinkLowPriorityObject].value}`);\n            break;\n        case \"compareToUplinkObjectWithinRange\":\n            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : ${bacnetObjects[downlinkLowPriorityObject].uplinkToCompareWith} ${bacnetObjects[bacnetObjects[downlinkLowPriorityObject].uplinkToCompareWith].value}  != ${downlinkLowPriorityObject} ${bacnetObjects[downlinkLowPriorityObject].value}`);\n            break;\n        case \"compareToUplinkObject\":\n            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : ${bacnetObjects[downlinkLowPriorityObject].uplinkToCompareWith} ${bacnetObjects[bacnetObjects[downlinkLowPriorityObject].uplinkToCompareWith].value}  != ${downlinkLowPriorityObject} ${bacnetObjects[downlinkLowPriorityObject].value}`);\n            break;\n        default:\n                        \n    }\n    //Creation of the dowlink payload\n    downlinkPayloadCreation(downlinkLowPriorityObject)        \n}else if (Object.keys(payload).length == 0){\n\n    node.status({fill: \"green\", shape: \"dot\" ,text: \"No downlink\"});\n    return null;\n}\n\n//Update the previous values\nfor (let object in payload) {\n    previousBacnetObject[object].value =  payload[object] ;\n}\n\n\n//Create the downlink payload\nlet downlinkJson = {};\n// Modify the downlink object according to the lorawanPayloadName.\n\nfor (let object in payload) {\n    // Don't do any changes if lorawanPayloadName is the same as the BACnet Object name.\n    if (!Object.keys(device.bacnet.objects).some(element => element == device.bacnet.objects[object].lorawanPayloadName)) {\n        payload[device.bacnet.objects[object].lorawanPayloadName] = payload[object];\n        delete payload[object];\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////\n// The Things Stack Network Server \n/////////////////////////////////////////////////////////////////////////\nif (device.lorawan.networkServer == \"tts\") {\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink + (device.lorawan.flushDownlinkQueue ? \"/replace\" : \"/push\"),\n        \"payload\": {\n            \"downlinks\": [\n                {\n                    \"f_port\": device.lorawan.downlinkPort,\n                    \"decoded_payload\": payload,\n                    \"priority\": \"NORMAL\"\n                },\n            ]\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n    return downlinkJson;\n}\n/*\n//////////////////////////////////////////////////////////////////////////\n// helium Network Server \n/////////////////////////////////////////////////////////////////////////\nif (device.lorawan.networkServer == \"helium\") {\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink,\n        \"payload\": {\n            \"payload_raw\": \"SGVsbG8sIHdvcmxkIQ==\",\n            \"port\": device.lorawan.downlinkPort,\n            \"confirmed\": false\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n    return downlinkJson;\n}\n*/\n//////////////////////////////////////////////////////////////////////////\n// Chipstack Network Server \n/////////////////////////////////////////////////////////////////////////\n// 1. Flush the downlink Queue\n\nif (device.lorawan.networkServer == \"chirpstack\") {\n    if (device.lorawan.flushDownlinkQueue == true) {\n        debug(device, \"downlink\", device.identity.deviceName + \" flush downlink queue\");\n        //We include flow value from libraries\n        var grpc = grpcJs;\n        var device_grpc = chirpstack_device_grpc;\n        var device_pb = chirpstack_device_pb;\n\n        // This must point to the ChirpStack API interface.\n        const server = \"chirpstack.univ-lorawan.fr:8080\";\n        // The DevEUI for which we want to enqueue the downlink.\n        const devEui = device.identity.devEUI;\n        \n        // The API token (can be obtained through the ChirpStack web-interface).\n        const apiToken = device.lorawan.chirpstack.grpcApiKey;\n\n        // Create the client for the DeviceService.\n        const deviceService = new device_grpc.DeviceServiceClient(\n            server,\n            grpc.credentials.createInsecure(),\n        );\n\n        // Create the Metadata object.\n        const metadata = new grpc.Metadata();\n        metadata.set(\"authorization\", \"Bearer \" + apiToken);\n\n        //Flush downlink queue request\n        const flushReq = new device_pb.FlushDeviceQueueRequest();\n        flushReq.setDevEui(devEui);\n\n        //Send the request\n        deviceService.flushQueue(flushReq, metadata, (err, resp) => {\n            if (err !== null) {\n                node.error(`Can't flush ChirpStack downlink queue :  ${err}`);\n            }\n        });\n    }\n\n    // 2. Prepare downlink JSON\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink,\n        \"payload\": {\n            \"devEui\": device.identity.devEUI,\n            \"confirmed\": false,\n            \"fPort\": device.lorawan.downlinkPort,\n            \"object\": payload\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`); \n    return downlinkJson;\n}\n\n\n//////////////////////////////////////////////////////////////////////////\n// Actility Network Server \n/////////////////////////////////////////////////////////////////////////\nif (device.lorawan.networkServer == \"actility\") {\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink,\n        \"payload\": {\n            \"DevEUI_downlink\": {\n                \"DevEUI\": device.identity.devEUI,\n                \"FPort\": device.lorawan.downlinkPort,\n                \"payload\": payload,\n                \"FlushDownlinkQueue\": String(+device.lorawan.flushDownlinkQueue),\n                \"DriverCfg\": {\n                    \"app\": {\n                        \"pId\": device.lorawan.actility.driver.pId,\n                        \"mId\": device.lorawan.actility.driver.mId,\n                        \"ver\": device.lorawan.actility.driver.ver\n                    }\n                }\n            }\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n    return downlinkJson;\n}\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "grpcJs",
                "module": "@grpc/grpc-js"
            },
            {
                "var": "chirpstack_device_pb",
                "module": "@chirpstack/chirpstack-api/api/device_pb"
            },
            {
                "var": "chirpstack_device_grpc",
                "module": "@chirpstack/chirpstack-api/api/device_grpc_pb"
            }
        ],
        "x": 1111,
        "y": 279,
        "wires": [
            [
                "a5f874ca0bf82682"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "c6242cf0d850ad6a",
        "type": "debug",
        "z": "817e4dabf2b43baa",
        "g": "9d842abe6fa6f223",
        "name": "Debug Downlink message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 240,
        "wires": []
    },
    {
        "id": "79f09a446f9ed014",
        "type": "function",
        "z": "817e4dabf2b43baa",
        "g": "a990745e23c4a9cb",
        "name": "WRITE uplink objects",
        "func": "let client = new nodeBacnet();\nlet device = msg.device;\nlet debug = flow.get(\"g_debug\");\nlet temp;\n\n// If the device controller protocol is not \"bacnet\" there is no need to be here \nif(device?.controller?.protocol != \"bacnet\") return null;\n\nlet bacnetObject = device.bacnet.objects;\n\nfor (let object in bacnetObject) {\n  if (bacnetObject[object].dataDirection === \"uplink\") {\n    //  Read of the uplink bacnet objects\n    client.writeProperty(device.controller.ipAddress, {type: bacnetObject[object].objectType, instance: bacnetObject[object].instanceNum}, 85, [{type: ((bacnetObject[object].objectType == 2) ? 4 : 0), value: bacnetObject[object].value}], (err, value) => {\n      if(err){\n          msg.payload = err;\n          node.status({fill:\"red\",shape:\"dot\",text:\"BACnet \"+ err});\n          node.error(\"Error writing bacnet objects\", {\n            errorType: \"nativeBACnet\",\n            error: err,\n            \n          });\n          return null;\n        } else {\n          msg.payload = value;\n          debug(device, \"up\",`${device.identity.deviceName} (${device.controller.protocol}) : Write Uplink Objects`)\n          node.status({fill:\"green\",shape:\"dot\",text:\"Native BACnet\"});\n        }\n    });\n\n  }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "nodeBacnet",
                "module": "node-bacnet"
            }
        ],
        "x": 581,
        "y": 316,
        "wires": [
            [
                "9057780c3043f613"
            ]
        ]
    },
    {
        "id": "9057780c3043f613",
        "type": "function",
        "z": "817e4dabf2b43baa",
        "g": "d9d43cf968f2ab66",
        "name": "READ downlink objects",
        "func": "let client = new nodeBacnet();\nlet device = msg.device;\nlet bacnetObject = device.bacnet.objects;\nlet debug = flow.get(\"g_debug\");\nlet requestArray = [];\n\nif (device.controller.protocol != \"bacnet\") return null;\n\n// Build the request array\nfor (let object in bacnetObject) {\n  if (bacnetObject[object].dataDirection === \"downlink\") {\n    let temp = JSON.parse('{\"objectId\": { \"type\":' + bacnetObject[object].objectType + ', \"instance\":' + bacnetObject[object].instanceNum + '},\"properties\": [ {\"id\": 85} ] }');\n    requestArray.push(temp);\n  }\n}\n\n// Use a Promise to manage the asynchronous function\nreturn new Promise((resolve, reject) => {\n  client.readPropertyMultiple(device.controller.ipAddress, requestArray, (err, value) => {\n    if (err) {\n      node.error(err);\n      node.status({ fill: \"red\", shape: \"dot\", text: \"BACnet \" + err });\n      reject(err); // reject the promise in case of error\n    } else if (value) {\n      msg.payload = value;\n      debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Read downlink Objects`);\n      node.status({ fill: \"green\", shape: \"dot\", text: \"Native BACnet\" });\n      resolve(msg); // resolve the promise with the node message\n    }\n  });\n}).then((msg) => {\n  // once the promise has been resolved\n  let values = msg.payload.values || [];\n  node.warn(values);\n  // store the values in the device objects value property\n  for (let i = 0; i < values.length; i++) {\n    Object.values(bacnetObject).forEach(obj => {\n      if (values[i].objectId.type == obj.objectType && values[i].objectId.instance == obj.instanceNum) {\n        obj.value = values[i].values[0].value[0].value;\n      }\n    });\n  }\n  return {\n    \"device\":device\n  };\n}).catch((err) => {\n  node.status({ fill: \"red\", shape: \"dot\", text: err });\n  node.error(\"Error reading bacnet objects\", {\n    errorType: \"nativeBACnet\",\n    error: err,\n\n  });\n  return null;\n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "nodeBacnet",
                "module": "node-bacnet"
            }
        ],
        "x": 853,
        "y": 316,
        "wires": [
            [
                "bd79217da71323f2"
            ]
        ]
    },
    {
        "id": "8f63125f79c7fbe1",
        "type": "debug",
        "z": "817e4dabf2b43baa",
        "g": "675d2785724bfb32",
        "name": "debug MQTT uplink",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 337,
        "wires": []
    },
    {
        "id": "8fbaa8668d2d8a58",
        "type": "mqtt in",
        "z": "817e4dabf2b43baa",
        "g": "675d2785724bfb32",
        "name": "MQTT Subscriber",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 277,
        "wires": [
            [
                "8f63125f79c7fbe1",
                "9998d341375b9595"
            ]
        ],
        "info": "\r\n# MQTT Subscriber node\r\n\r\n - How to configure this node\r\n    -\r\n    The configuration off this node depend of which LNS or MQTT broker you use.\r\n\r\n    - For The Things Network\r\n        - \r\n        With **TTN LNS** you have to use the following topic :\r\n            ***`v3/{application_id}@ttn/devices/+/up`*** \\\r\n        Replace `{application_id}` by your application id in TTN.\\\r\n         And don't forget the `@ttn`\r\n    - For The Things Stack\r\n        - \r\n        With **TTS LNS** you have to use the following topic :\r\n            ***`v3/{application_id}/devices/+/up`*** \\\r\n        Replace `{application_id}` by your application id in TTS.\r\n\r\n    - For Chirpstack\r\n        - \r\n        With **Chirpstack LNS** you have to use the following topic :\r\n            ***`application/{application_id}/device/+/event/up`*** \\\r\n        Replace `{application_id}` by your application id (it's the number, not the name !).\r\n    - For Actility\r\n        - \r\n        if you use **Actility LNS** see the [documentation](https://docs.thingpark.com/thingpark-x/latest/Connector/BROKER_MQTT/) for using actillity broker\r\n\r\n        - For actility-USMB Broker : ***`univ-smb/devices/+/uplink`***\r\n        - For HiveMQ Broker : ***`mqtt/things/+/uplink`***\r\n        \r\n    - For other LNS or MQTT broker\r\n        - \r\n        If you use any other LNS or MQTT broker please refer to their documentation to configure this MQTT node."
    },
    {
        "id": "9998d341375b9595",
        "type": "LoRaBAC",
        "z": "817e4dabf2b43baa",
        "g": "675d2785724bfb32",
        "name": "LoRaBAC",
        "globalConfig": {
            "ipAddress": "",
            "networkServer": "tts",
            "grpcApiKey": "",
            "protocol": "bacnet",
            "model": "distechControlsV2",
            "bacnetLogin": "",
            "bacnetPassword": ""
        },
        "deviceCount": 1,
        "arrayDeviceList": [],
        "deviceList": {},
        "x": 300,
        "y": 277,
        "wires": [
            [
                "a0980c385c432953"
            ]
        ]
    },
    {
        "id": "7d18c7d59c3ba293",
        "type": "subflow:b69f118eda93bcba",
        "z": "817e4dabf2b43baa",
        "g": "d9d43cf968f2ab66",
        "name": "Rest API Read downlink",
        "env": [
            {
                "name": "dataDirection",
                "value": "downlink",
                "type": "str"
            }
        ],
        "x": 851,
        "y": 239,
        "wires": [
            [
                "bd79217da71323f2"
            ]
        ]
    },
    {
        "id": "1183a019f6586c9a",
        "type": "subflow:b69f118eda93bcba",
        "z": "817e4dabf2b43baa",
        "g": "a990745e23c4a9cb",
        "name": "Rest API Write uplink",
        "x": 581,
        "y": 239,
        "wires": [
            [
                "7d18c7d59c3ba293"
            ]
        ]
    }
]